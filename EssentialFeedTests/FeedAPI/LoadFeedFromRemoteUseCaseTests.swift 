//
//  RemoteFeedLoaderTests.swift
//  EssentialFeedTests
//
//  Created by Sharu on 29/08/20.
//  Copyright Â© 2020 Sharu. All rights reserved.
//

import Foundation
import XCTest

@testable import EssentialFeed

class LoadFeedFromRemoteUseCaseTests : XCTestCase
{
    
    func test_init_doesNotRequestDataFromURL()
    {
        let(_,client) = makeSUT()
        XCTAssertTrue(client.requestedURLs.isEmpty)
    }
    
    func test_load_requestsDataFromURL()
    {
        let givenurl = URL(string:"https://a-given-url.com")!
        let (sut,client) = makeSUT(givenurl:givenurl)
        sut.load{_ in }
        XCTAssertEqual(client.requestedURLs,[givenurl])
        
        
//        let url = www.amazon.com
//        let(sut,client) = makeSUT(url)
//        sut = RemoteFeedLoader
//        client = HttpClientSpy - loadresult - success, failure - urlresponse
//        sut.load
    }
    
    func test_loadTwice_requestsDataFromURLTwice()
    {
        let givenurl = URL(string:"https://a-given-url.com")!
        let (sut,client) = makeSUT(givenurl:givenurl)
        sut.load{_ in }
        sut.load{_ in }
        XCTAssertEqual(client.requestedURLs,[givenurl,givenurl])
    }
    
    
    func test_load_deliversErrorOnClientError(){
        let(sut,client) = makeSUT()
        
        expect(sut, toCompleteWith: failure(.connectivity), when: {let clientError = NSError(domain: "Test", code: 0)
            client.complete(with:clientError)})
        
        
    }
    
    func test_load_deliversErrorOnNon200HttpResponse(){
        let(sut,client) = makeSUT()
        
        let samples = [199, 201,300,400,500]
        
        samples.enumerated().forEach{index, code in
            
            expect(sut, toCompleteWith: failure(.invalidData),when: {
                let json = makeItemsJSON([])
                client.complete(withStatusCode:code, data:json,at: index)})
        }
    }
    
    func test_load_deliversErrorOn200ResponseWithInvalidJSON(){
        let(sut,client) = makeSUT()
        
        expect(sut, toCompleteWith:failure(.invalidData), when: {
            let invalidJSON = Data("invalid JSON".utf8)
            client.complete(withStatusCode:200,
            data:invalidJSON)
            
        })
        
          
    }
    
    func test_load_deliversNoItemsOn200HTTPResponseWithEmptyJSONList() {
         let (sut, client) = makeSUT()
        
        expect(sut, toCompleteWith: .success([]), when: {
             let emptyListJSON = makeItemsJSON([])
             client.complete(withStatusCode: 200, data: emptyListJSON)
         })
     }
    
    
    
    func test_load_deliversItemsOn200HTTPResponseWithJSONItems()
    {
        let(sut,client) = makeSUT()
        
        let item1 = makeItem(
            id: UUID(),
            imageURL: URL(string: "http://a-url.com")!)
        
        let item2 = makeItem(
            id: UUID(),
            description: "a description ",
            location: "a location   ",
            imageURL: URL(string: "http://another-url.com")!)
        
        
        let items = [item1.model,item2.model]
        
        expect(sut,toCompleteWith: .success(items),when:{
            let json = makeItemsJSON([item1.json,item2.json])
            
            client.complete(withStatusCode: 200, data: json)
        } )
        
        
    }
    
    func test_load_doesNotDeliverResultAfterSUTInstanceHasBeenDeallocated(){
        let url = URL(string:"http://any-url.com")!
        let client = HttpClientSpy()
        var sut:RemoteFeedLoader? = RemoteFeedLoader(url: url, client: client)
        
        var capturedResults = [RemoteFeedLoader.Result]()
        sut?.load{capturedResults.append($0)}
                           
        sut = nil
        client.complete(withStatusCode: 200, data: makeItemsJSON([]))
        XCTAssertTrue(capturedResults.isEmpty)
    }
    
    // Mark:- Helpers
    
    private func makeSUT(givenurl:URL = URL(string: "https://a-url.com")!,file: StaticString = #file, line: UInt = #line) ->
        (sut:RemoteFeedLoader,client:HttpClientSpy){
            
        let client = HttpClientSpy()
        let sut = RemoteFeedLoader(url: givenurl, client: client)
        trackForMemoryLeaks(sut)
        trackForMemoryLeaks(client)
        return(sut,client)
    }
    
    private func failure(_ error: RemoteFeedLoader.Error) -> RemoteFeedLoader.Result{
        return .failure(error)
    }
    
    
    
    private func makeItem(id: UUID, description: String? = nil, location: String? = nil, imageURL: URL) -> (model: FeedImage, json: [String: Any]) {
         let item = FeedImage(id: id, description: description, location: location, url: imageURL)

         let json = [
             "id": id.uuidString,
             "description": description,
             "location": location,
             "image": imageURL.absoluteString
         ].compactMapValues { $0 }

         return (item, json)
     }

     private func makeItemsJSON(_ items: [[String: Any]]) -> Data {
         let json = ["items": items]
         return try! JSONSerialization.data(withJSONObject: json)
     }
    
    private func expect(_ sut:RemoteFeedLoader,toCompleteWith expectedResult:RemoteFeedLoader.Result,when action:() ->Void, file: StaticString = #file, line: UInt = #line)
    
    {
        let exp = expectation(description:"Wait for load completion")
        
        sut.load{receivedResult in
            switch (receivedResult, expectedResult){
            case let (.success(receivedItems),.success(expectedItems)):
                XCTAssertEqual(receivedItems, expectedItems, file:file, line:line)
            case let (.failure(receivedError as RemoteFeedLoader.Error),.failure(expectedError as RemoteFeedLoader.Error)):
                XCTAssertEqual(receivedError, expectedError, file:file, line:line)

               
                
            default:
                XCTFail("Expected Result \(expectedResult) got \(receivedResult) instead", file:file, line:line)
                
            }
            
            exp.fulfill()
            
        }
                   
        action()
               
        wait(for:[exp],timeout : 1.0)
    }
    
}
  
